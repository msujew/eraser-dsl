import { inject } from 'langium';
import type { Module } from 'langium';
import { createDefaultModule, createDefaultSharedModule } from 'langium/lsp';
import type {
  DefaultSharedModuleContext,
  LangiumServices,
  LangiumSharedServices,
  PartialLangiumServices,
} from 'langium/lsp';
import { EraserDslGeneratedModule, EraserGeneratedSharedModule } from '../generated/module.js';
import { EraserValidator, registerEraserValidationChecks } from './eraser-validator.js';
import { EraserScopeProvider } from './eraser-scope.js';
import { EraserNameProvider } from './eraser-name-provider.js';
import { EraserReferences } from './eraser-references.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type EraserAddedServices = {
  validation: {
    EraserValidator: EraserValidator;
  };
  references: {
    ScopeProvider: EraserScopeProvider;
    NameProvider: EraserNameProvider;
    References: EraserReferences;
  };
};

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type EraserServices = LangiumServices & EraserAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const EraserModule: Module<EraserServices, PartialLangiumServices & EraserAddedServices> = {
  validation: {
    EraserValidator: () => new EraserValidator(),
  },
  references: {
    ScopeProvider: (services) => new EraserScopeProvider(services),
    NameProvider: () => new EraserNameProvider(),
    References: (services) => new EraserReferences(services),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createEraserServices(
  context: DefaultSharedModuleContext
): {
  shared: LangiumSharedServices;
  Eraser: EraserServices;
} {
  const shared = inject(createDefaultSharedModule(context), EraserGeneratedSharedModule);
  const Eraser = inject(createDefaultModule({ shared }), EraserDslGeneratedModule, EraserModule);
  shared.ServiceRegistry.register(Eraser);
  registerEraserValidationChecks(Eraser);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({});
  }

  return { shared, Eraser };
}
